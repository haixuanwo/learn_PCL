/*
 * @Author: Clark
 * @Email: haixuanwoTxh@gmail.com
 * @Date: 2024-05-17 14:48:22
 * @LastEditors: Clark
 * @LastEditTime: 2024-05-17 16:13:46
 * @Description: file content
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <opencv2/highgui.hpp>
#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>

cv::Mat userColor = (cv::Mat_<uchar>(256, 3) <<
       128, 0, 0,
       0, 0, 128,
       0, 0, 136,
       0, 0, 144,
       0, 0, 152,
       0, 0, 160,
       0, 0, 168,
       0, 0, 176,
       0, 0, 184,
       0, 0, 192,
       0, 0, 200,
       0, 0, 208,
       0, 0, 216,
       0, 0, 224,
       0, 0, 232,
       0, 0, 240,
       0, 0, 248,
       0, 0, 255,
       0, 8, 255,
       0, 16, 255,
       0, 24, 255,
       0, 32, 255,
       0, 40, 255,
       0, 48, 255,
       0, 56, 255,
       0, 64, 255,
       0, 72, 255,
       0, 80, 255,
       0, 88, 255,
       0, 96, 255,
       0, 104, 255,
       0, 112, 255,
       0, 120, 255,
       0, 128, 255,
       0, 136, 255,
       0, 144, 255,
       0, 152, 255,
       0, 160, 255,
       0, 168, 255,
       0, 176, 255,
       0, 184, 255,
       0, 192, 255,
       0, 200, 255,
       0, 208, 255,
       0, 216, 255,
       0, 224, 255,
       0, 232, 255,
       0, 240, 255,
       0, 248, 255,
       2, 255, 254,
       10, 255, 246,
       18, 255, 238,
       26, 255, 230,
       34, 255, 222,
       42, 255, 214,
       50, 255, 206,
       58, 255, 198,
       66, 255, 190,
       74, 255, 182,
       82, 255, 174,
       90, 255, 166,
       98, 255, 158,
       106, 255, 150,
       114, 255, 142,
       122, 255, 134,
       130, 255, 126,
       138, 255, 118,
       146, 255, 110,
       154, 255, 102,
       162, 255, 94,
       170, 255, 86,
       178, 255, 78,
       186, 255, 70,
       194, 255, 62,
       202, 255, 54,
       210, 255, 46,
       214, 255, 42,
       218, 255, 38,
       222, 255, 34,
       226, 255, 30,
       230, 255, 26,
       234, 255, 22,
       238, 255, 18,
       242, 255, 14,
       246, 255, 10,
       250, 255, 6,
       254, 255, 1,
       255, 252, 0,
       255, 248, 0,
       255, 244, 0,
       255, 240, 0,
       255, 236, 0,
       255, 232, 0,
       255, 228, 0,
       255, 224, 0,
       255, 220, 0,
       255, 216, 0,
       255, 212, 0,
       255, 208, 0,
       255, 204, 0,
       255, 200, 0,
       255, 196, 0,
       255, 192, 0,
       255, 188, 0,
       255, 184, 0,
       255, 180, 0,
       255, 176, 0,
       255, 172, 0,
       255, 168, 0,
       255, 166, 0,
       255, 164, 0,
       255, 162, 0,
       255, 160, 0,
       255, 158, 0,
       255, 156, 0,
       255, 154, 0,
       255, 152, 0,
       255, 150, 0,
       255, 148, 0,
       255, 146, 0,
       255, 144, 0,
       255, 142, 0,
       255, 140, 0,
       255, 138, 0,
       255, 136, 0,
       255, 134, 0,
       255, 132, 0,
       255, 130, 0,
       255, 128, 0,
       255, 126, 0,
       255, 124, 0,
       255, 122, 0,
       255, 120, 0,
       255, 118, 0,
       255, 116, 0,
       255, 114, 0,
       255, 112, 0,
       255, 110, 0,
       255, 108, 0,
       255, 106, 0,
       255, 104, 0,
       255, 102, 0,
       255, 100, 0,
       255, 98, 0,
       255, 96, 0,
       255, 94, 0,
       255, 92, 0,
       255, 90, 0,
       255, 88, 0,
       255, 86, 0,
       255, 84, 0,
       255, 82, 0,
       255, 80, 0,
       255, 78, 0,
       255, 76, 0,
       255, 74, 0,
       255, 72, 0,
       255, 70, 0,
       255, 68, 0,
       255, 66, 0,
       255, 64, 0,
       255, 62, 0,
       255, 60, 0,
       255, 58, 0,
       255, 56, 0,
       255, 54, 0,
       255, 52, 0,
       255, 50, 0,
       255, 48, 0,
       255, 46, 0,
       255, 44, 0,
       255, 42, 0,
       255, 40, 0,
       255, 38, 0,
       255, 36, 0,
       255, 34, 0,
       255, 32, 0,
       255, 30, 0,
       255, 28, 0,
       255, 26, 0,
       255, 24, 0,
       255, 22, 0,
       255, 20, 0,
       255, 18, 0,
       255, 16, 0,
       255, 14, 0,
       255, 12, 0,
       255, 10, 0,
       255, 8, 0,
       255, 6, 0,
       255, 4, 0,
       255, 2, 0,
       255, 0, 0,
       252, 0, 0,
       250, 0, 0,
       248, 0, 0,
       246, 0, 0,
       244, 0, 0,
       242, 0, 0,
       240, 0, 0,
       238, 0, 0,
       236, 0, 0,
       234, 0, 0,
       232, 0, 0,
       230, 0, 0,
       228, 0, 0,
       226, 0, 0,
       224, 0, 0,
       222, 0, 0,
       220, 0, 0,
       218, 0, 0,
       216, 0, 0,
       214, 0, 0,
       212, 0, 0,
       210, 0, 0,
       208, 0, 0,
       206, 0, 0,
       204, 0, 0,
       202, 0, 0,
       200, 0, 0,
       198, 0, 0,
       196, 0, 0,
       194, 0, 0,
       192, 0, 0,
       190, 0, 0,
       188, 0, 0,
       186, 0, 0,
       184, 0, 0,
       182, 0, 0,
       180, 0, 0,
       178, 0, 0,
       176, 0, 0,
       174, 0, 0,
       172, 0, 0,
       170, 0, 0,
       168, 0, 0,
       166, 0, 0,
       164, 0, 0,
       162, 0, 0,
       160, 0, 0,
       158, 0, 0,
       156, 0, 0,
       154, 0, 0,
       152, 0, 0,
       150, 0, 0,
       148, 0, 0,
       146, 0, 0,
       144, 0, 0,
       142, 0, 0,
       140, 0, 0,
       138, 0, 0,
       136, 0, 0,
       134, 0, 0,
       132, 0, 0,
       130, 0, 0,
       128, 0, 0);





int main(int argc, char **argv)
{
    if (argc < 2)
    {
        std::cerr << "Usage: " << argv[0] << " depth.bin" << std::endl;
        return -1;
    }

    float *depth_d = (float *)malloc(640 * 480 * 4);
    cv::Mat depth_f(480, 640, CV_32FC1, depth_d);
    unsigned char *tmp = (unsigned char *)depth_f.data;

    FILE *fp = fopen(argv[1], "rb");
    fread(tmp, 1, 640 * 480 * 4, fp);
    fclose(fp);

    // cv::Mat depth = cv::Mat(out_frame.height, out_frame.width, CV_32FC1, out_frame.pDepth).clone();
    // cv::Rect roi(depth.cols/2-5, depth.rows/2-5, 10, 10);
    // cv::Mat roi_dp = depth(roi);
    // float tmp = cv::sum(roi_dp)[0] / 100.f;
    cv::Mat depth_show, depth_rainbow;
    depth_f.convertTo(depth_show, CV_8UC1, 255.0/1200);
    cv::imshow("depth", depth_show);
    userColor = userColor.reshape(3, {256, 1}); //用作显示
    cv::applyColorMap(depth_show, depth_rainbow, userColor);
    cv::imshow("rainbow", depth_rainbow);
    cv::waitKey(10000);

    getchar();
    return 0;
}
